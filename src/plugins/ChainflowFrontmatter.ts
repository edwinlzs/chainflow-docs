/** Custom plugin to inject frontmatter into docs generated by starlight-typedoc */
import fs from "fs";
import type { StarlightPlugin } from "@astrojs/starlight/types";

interface ChainflowFrontmatterOptions {
  docsDir: string;
  frontmatter: Record<string, string>;
}

export default function chainflowFrontmatter(
  options: ChainflowFrontmatterOptions
): StarlightPlugin {
  return {
    name: "chainflowFrontmatter-frontmatter-plugin",
    hooks: {
      async setup({ logger }) {
        inject(options);
        logger.info(`Chainflow frontmatter injected into docs at ${options.docsDir}`);
      },
    },
  };
}

const inject = ({ docsDir, frontmatter }: ChainflowFrontmatterOptions) => {
  findFiles(docsDir, isMdFile, injectFrontmatter(frontmatter));
};

const findFiles = (
  currentDir: string,
  filter: (path: string) => boolean,
  callback: (filename: string, currentDir: string) => void
) => {
  const paths = fs.readdirSync(currentDir);

  paths.forEach((path: string) => {
    const filename = `${currentDir}/${path}`;

    if (filter(path)) {
      return callback(filename, currentDir);
    }

    const stat = fs.lstatSync(filename);
    if (stat.isDirectory()) {
      findFiles(filename, filter, callback);
    }
  });
};

const isMdFile = (path: string): boolean => {
  const parts = path.split(".");
  return parts.length > 1 && ["md", "mdx"].includes(parts[parts.length - 1]);
};

const injectFrontmatter =
  (frontmatter: Record<string, string>) => (filename: string) => {
    let content: string = fs.readFileSync(filename).toString();

    let [prefrontmatter, currentFrontmatter, markdown] = content.split(
      "---",
      3
    );
    Object.entries(frontmatter).forEach(
      ([key, value]) => (currentFrontmatter += `${key}: "${value}"\n`)
    );
    content = [prefrontmatter, currentFrontmatter, markdown].join("---");

    fs.writeFileSync(filename, content);
  };
